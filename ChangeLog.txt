0.42:
- Removed thread checks where they were not needed in Lua C function calls
- Reinstated pushing the lua thread onto the registry when acquiring the state to avoid having to resort to the backup list
- Added the Lua function httpError(N) for calling the internal Apache error handler with return code N
- SetReturnCode now only sets the return code, it does not call the Apache error handler

0.41:
- Added a backup state list for ensuring that external modules won't break the retrieval of handles

0.40:
- Changed some default directive values
- header() will now accept numbers as its second argument
- Any shebang (#!) encountered on line 1 of raw lua files will now be ignored

0.39:
- Releasing a Lua state no longer requires a mutex lock
- Garbage collection is now done less frequently, to boost performance
- Various small performance tweaks
- getPWD() now returns "." on failure instead of just 0
- In the event of a Lua panic, errors will be copied to stderr as well
- The script cache handler will now consider file sizes as well as time of modification to determine if an update is required

0.38:
- The thread struct for each Lua state is now referenced at initialization instead of at execution time
- The sleep() function will no longer allow scripts to sleep for longer than pLuaTimeout specifies (if set)
- The rudimentary compiler (compile.sh) should now be able to link against any Lua library available

0.37:
- Added a header file for managing structs, defs and prototypes
- Added the exit() Lua function for halting a script quietly

0.36:
- Re-enabled the global pool mutex that was shut off for debugging purposes
- 404 errors now use apache's 404 handler instead
- Changed the hooking procedure, so directives will be caught and used before the first pool is created

0.35:
- Databases opened with dbopen() should now properly close if GC'ed in Lua 5.2
- The GC call for databases now has its own function for cleaning up, as opposed to using db:close()
- Changed the maximum number of variables and chained variables allowed in a GET/POST request
- Fixed a bug that would crash mod_pLua on Apache 2.4 when a compiler or runtime error was met

0.34:
- compileTime() on UNIX will now return the time of the initial HTTP request as reported by Apache
- pLuaMultiDomain is now enabled by default - let's see how it goes
- Added pLuaLogLevel directive for setting what gets logged in the error.log file
- Added a new unified pLua_getClock() function for accessing the precise time on all platforms
- Calling clock() and compileTime() on any platform will now return the correct unix timestamp with microsecond accuracy

0.33:
- Added the sleep(N) function for primarilly testing purposes
- mod_pLua now uses the file information passed on by Apache to speed things up
- include() now uses apr_stat instead of stat

0.32:
- (experimental) support for dynamically allocated per-vhost state pools
- Added the pLuaMultiDomain directive for enabling multiple state pools
- Removed the old hardcoded state pool generators
- Added the flush() function for flushing the output buffer immediately (remember to set your content type prior to this!)
- Upped the default number of states to 50 again (just because)

0.31:
- Added mutex support for Windows packages
- Updated the mod_pLua example page (test.plua)
- New pLua logo! I hope you like it :)
- Added a last-minute resort to bundle up all excess vhosts into one state pool if no free pools are available
- Did some rewriting to prepare for a dynamic allocation of new domain pools

0.30:
- Changed the html output echo function to use [==[ ]==] enclosures instead, to avoid common nesting errors
- Added the pLuaError directive for setting whether to output errors to the screen or not
- Added the showErrors(true/false) Lua call to set individual script error levels

0.29:
- parseGet and parsePost will now return a table regardless of whether data exists
- parsePost can only be called once now
- using html right after a closing tag will no longer trigger an error
- mod_pLua now has a new directive, pLuaTimeout, for setting an optional timeout in seconds for scripts

0.28:
- Failure to obtain the correct lua_thread struct will now be printed to apache's error log.
- Consolidated some data fetching throughout the code.
- mod_pLua now works with both Lua 5.1 and 5.2!
- Added a new environment key, "Lua-Version" which shows either 5.1 or 5.2 depending on the interpreter version

0.27:
- Error messages have been beautified and shows the file and line number that caused the error instead of '[[string "..."]]'.
- The string.SHA256() function has been improved in speed significantly (2.5x speed improvement)

0.26:
- mod_pLua scripts can now use both the <? ?> and the <?lua ?> enclosures
- Added a new directive, pLuaRaw <ext> for making pLua compile certain files as plain Lua code

0.25:
- Database handles now have their own memory pool to play with and free up on db:close()

0.24:
- Output will now be flushed for each 20KB data printed to avoid overruns
- Added ServerName information to getEnv()
- mod_plua will now launch in a state pool reserved for each specific vhost to avoid global collisions

0.23:
- Added db:active() for checking whether a database connection is still working or closed (or GC'ed)

0.22:
- Added some descriptions to main.c
- Added a few more environment keys/values
- Changed the mod_plua test page to include encryption and database tests
- Calling dbopen with an empty connection string will now only test if the dbd driver exists
- Database handles are now persistent through sessions untill closed or GC'ed

0.21:
- dbopen, dbopen:run and dbopen:query will now return (nil, errormessage) on failure
- Moved mallocs/callocs from crypt functions over to apr_pcalloc

0.20:
- Added Unparsed-URI, Request and Path-Info to the environment table
- Fixed an issue where ParseGet() would return unknown results if passed an empty string
- Added string.encode64() and string.decode64() for handling Base64 encoding on the fly
- Added string.SHA256() for using SHA256 hashes

0.19:
- Added file.rename(oldfile,newfile) for moving files around.
- Added file.unlink(filename) for deleting files
- Null-data preceding code blocks is no longer added as an empty echo
- Old cache entries are now properly dereferenced when being replaced by new entries
- File statistics are now being re-used in the compiler, giving a whopping 2% speed boost

0.18:
- Moved around code Change hook calls so all plua structs can be created using apr_pcalloc and use apache's memory pool
- Added db:escape(string) for escaping SQL data

0.17:
- Added dbopen(dbType, parameters) for handling database connections via APR_DBD

0.16:
- Changed formdata structs to be allocated by APR instead of hardcoded
- mod_plua will now change the current working directory to that of the file being run
- Working-Directory is now listed as one of the key/value pairs in getEnv()

0.15:
- Added include(filename) for including other plua scripts or HTML content

0.14:
- Fine-tuned the clock() and compileTime() precisions on Windows

0.13:
- Added ChangeLog.txt to the project.
- Increased the precision of clock() and compileTime() on Windows systems to approximately 1/10th of a microsecond
- Changed from ap_rputs to ap_write for binary output compatibility
- Error outputs are now escaped so HTML code in the message won't obscure the rest of the message.

0.12:
- multipart form data can now be parsed
- Added a limit to both number of keys and the number of key values in a HTTP request

0.11:
- Consolidated the form data parsing into two new parsing functions that both POST and GET use.
- Getting ready to parse multipart form data.
- Added support for multiple values in form data
- Added a maximum number of 500 form fields parsed by parseGet and parsePost
