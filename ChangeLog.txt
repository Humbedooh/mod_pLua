0.30:
- Changed the html output echo function to use [==[ ]==] enclosures instead, to avoid common nesting errors.
- Added the pLuaError directive for setting whether to output errors to the screen or not.
- Added the showErrors(true/false) Lua call to set individual script error levels.

0.29:
- parseGet and parsePost will now return a table regardless of whether data exists
- parsePost can only be called once now
- using html right after a closing tag will no longer trigger an error
- mod_pLua now has a new directive, pLuaTimeout, for setting an optional timeout in seconds for scripts

0.28:
- Failure to obtain the correct lua_thread struct will now be printed to apache's error log.
- Consolidated some data fetching throughout the code.
- mod_pLua now works with both Lua 5.1 and 5.2!
- Added a new environment key, "Lua-Version" which shows either 5.1 or 5.2 depending on the interpreter version

0.27:
- Error messages have been beautified and shows the file and line number that caused the error instead of '[[string "..."]]'.
- The string.SHA256() function has been improved in speed significantly (2.5x speed improvement)

0.26:
- mod_pLua scripts can now use both the <? ?> and the <?lua ?> enclosures
- Added a new directive, pLuaRaw <ext> for making pLua compile certain files as plain Lua code

0.25:
- Database handles now have their own memory pool to play with and free up on db:close()

0.24:
- Output will now be flushed for each 20KB data printed to avoid overruns
- Added ServerName information to getEnv()
- mod_plua will now launch in a state pool reserved for each specific vhost to avoid global collisions

0.23:
- Added db:active() for checking whether a database connection is still working or closed (or GC'ed)

0.22:
- Added some descriptions to main.c
- Added a few more environment keys/values
- Changed the mod_plua test page to include encryption and database tests
- Calling dbopen with an empty connection string will now only test if the dbd driver exists
- Database handles are now persistent through sessions untill closed or GC'ed

0.21:
- dbopen, dbopen:run and dbopen:query will now return (nil, errormessage) on failure
- Moved mallocs/callocs from crypt functions over to apr_pcalloc

0.20:
- Added Unparsed-URI, Request and Path-Info to the environment table
- Fixed an issue where ParseGet() would return unknown results if passed an empty string
- Added string.encode64() and string.decode64() for handling Base64 encoding on the fly
- Added string.SHA256() for using SHA256 hashes

0.19:
- Added file.rename(oldfile,newfile) for moving files around.
- Added file.unlink(filename) for deleting files
- Null-data preceding code blocks is no longer added as an empty echo
- Old cache entries are now properly dereferenced when being replaced by new entries
- File statistics are now being re-used in the compiler, giving a whopping 2% speed boost

0.18:
- Moved around code Change hook calls so all plua structs can be created using apr_pcalloc and use apache's memory pool
- Added db:escape(string) for escaping SQL data

0.17:
- Added dbopen(dbType, parameters) for handling database connections via APR_DBD

0.16:
- Changed formdata structs to be allocated by APR instead of hardcoded
- mod_plua will now change the current working directory to that of the file being run
- Working-Directory is now listed as one of the key/value pairs in getEnv()

0.15:
- Added include(filename) for including other plua scripts or HTML content

0.14:
- Fine-tuned the clock() and compileTime() precisions on Windows

0.13:
- Added ChangeLog.txt to the project.
- Increased the precision of clock() and compileTime() on Windows systems to approximately 1/10th of a microsecond
- Changed from ap_rputs to ap_write for binary output compatibility
- Error outputs are now escaped so HTML code in the message won't obscure the rest of the message.

0.12:
- multipart form data can now be parsed
- Added a limit to both number of keys and the number of key values in a HTTP request

0.11:
- Consolidated the form data parsing into two new parsing functions that both POST and GET use.
- Getting ready to parse multipart form data.
- Added support for multiple values in form data
- Added a maximum number of 500 form fields parsed by parseGet and parsePost
